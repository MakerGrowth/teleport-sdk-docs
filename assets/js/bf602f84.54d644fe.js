"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2364],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7972:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const a={},o="Initializing the SDK",l={unversionedId:"initializing",id:"initializing",title:"Initializing the SDK",description:"Once you have installed the SDK, you can start building your application.",source:"@site/docs/02-initializing.md",sourceDirName:".",slug:"/initializing",permalink:"/docs/initializing",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02-initializing.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/docs/intro"},next:{title:"Teleport Flow",permalink:"/docs/flow"}},s={},p=[{value:"Getting a TeleportBridge instance",id:"getting-a-teleportbridge-instance",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"initializing-the-sdk"},"Initializing the SDK"),(0,i.kt)("p",null,"Once you have installed the SDK, you can start building your application."),(0,i.kt)("p",null,"The main class you will interact with is the ",(0,i.kt)("a",{parentName:"p",href:"/docs/sdk/teleport-sdk.teleportbridge"},"TeleportBridge"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { TeleportBridge } from 'teleport-sdk'\n")),(0,i.kt)("h2",{id:"getting-a-teleportbridge-instance"},"Getting a TeleportBridge instance"),(0,i.kt)("p",null,"The TeleportBridge requires two arguments in its constructor, these being a ",(0,i.kt)("em",{parentName:"p"},"Source Domain")," and a ",(0,i.kt)("em",{parentName:"p"},"Destination Domain"),". Supported source domains are"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"* optimism\n* arbitrum\n* optimism-testnet\n* arbitrum-testnet\n* optimism-goerli-testnet\n* arbitrum-goerli-testnet\n")),(0,i.kt)("p",null,"You can omit the ",(0,i.kt)("em",{parentName:"p"},"Destination Domain")," when using these as your source domain and the SDK will select the parent network as the destination domain. For example, if you select ",(0,i.kt)("inlineCode",{parentName:"p"},"arbitrum")," as your source domain, the SDK will select Mainnet as the destination."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Create a TeleportBridge object that handles Fast Withdrawals from Arbitrum to Mainnet.\nimport { TeleportBridge } from 'teleport-sdk'\n\nconst bridge = new TeleportBridge('abritrum')\n")))}u.isMDXComponent=!0}}]);