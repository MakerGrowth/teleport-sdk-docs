"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[562],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(r),d=a,g=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return r?n.createElement(g,i(i({ref:t},p),{},{components:r})):n.createElement(g,i({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6522:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={},i="Example Implementation",s={unversionedId:"example",id:"example",title:"Example Implementation",description:"This is a short example implementation of a teleportation script that teleports 1 DAI from Arbitrum One to Ethereum Mainnet.",source:"@site/docs/08-example.md",sourceDirName:".",slug:"/example",permalink:"/teleport-sdk-docs/docs/example",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/08-example.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Escape Hatch: Minting Without Oracles",permalink:"/teleport-sdk-docs/docs/escape-hatch"},next:{title:"SDK API Documentation",permalink:"/teleport-sdk-docs/docs/sdk/"}},c={},l=[],p={toc:l};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"example-implementation"},"Example Implementation"),(0,a.kt)("p",null,"This is a short example implementation of a teleportation script that teleports 1 DAI from Arbitrum One to Ethereum Mainnet.",(0,a.kt)("br",{parentName:"p"}),"\n","For more examples, check out the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/makerdao/xdomain/blob/master/packages/teleport-sdk/scripts/demo.ts"},"demo repository"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { TeleportBridge } from 'teleport-sdk'\n// assume getSigner returns a ethers.js Signer\nimport getSigner from 'src/getMetamaskSigner'\n\n// get a hold of a signer\nconst signer = getSigner()\n\n// initialize a bridge object\nconst bridge = new TeleportBridge({\n    srcDomain: 'arbitrum',\n    srcDomainProvider: signer\n})\n\n// get fees to be paid for teleporting 1 DAI\nconst amounts = await bridge.getAmounts(\n    ethers.constants.WeiPerEther()\n)\n\n// start teleporting 1 DAI\nconst bridgeCall = await bridge.initTeleport({\n    receiverAddress: signer.address,\n    amount: ethers.constants.WeiPerEther(),\n})\n\n// recover the TeleportGUID from our sent transaction\nconst guid = await bridge.getTeleportGUIDFromTxHash(\n    call.tx.hash\n)\n\n// collect attestations from the Maker Oracle network\nconst attestations = await bridge.getAttestations(\n    call.tx.hash\n)\n\n// send the GUID and attestations to a relayer and wait until the transaction has been posted\nawait bridge.relayMintWithOracles(\n    receiver: signer,\n    teleportGUID: guid,\n    signatures: attestations,\n    relayFee: amounts.relayFee\n)\n")))}m.isMDXComponent=!0}}]);