"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2364],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),m=i,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(g,a(a({ref:t},c),{},{components:r})):n.createElement(g,a({ref:t},c))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},7972:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(7462),i=(r(7294),r(3905));const o={},a="Initializing the SDK",l={unversionedId:"initializing",id:"initializing",title:"Initializing the SDK",description:"Once you have installed the SDK, you can start building your application.",source:"@site/docs/02-initializing.md",sourceDirName:".",slug:"/initializing",permalink:"/teleport-sdk-docs/docs/initializing",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02-initializing.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/teleport-sdk-docs/docs/intro"},next:{title:"Teleport Flow",permalink:"/teleport-sdk-docs/docs/flow"}},s={},p=[{value:"Getting a TeleportBridge instance",id:"getting-a-teleportbridge-instance",level:2}],c={toc:p};function d(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"initializing-the-sdk"},"Initializing the SDK"),(0,i.kt)("p",null,"Once you have installed the SDK, you can start building your application."),(0,i.kt)("p",null,"The main class you will interact with is the ",(0,i.kt)("a",{parentName:"p",href:"/teleport-sdk-docs/docs/sdk/teleport-sdk.teleportbridge"},"TeleportBridge"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { TeleportBridge } from 'teleport-sdk'\n")),(0,i.kt)("h2",{id:"getting-a-teleportbridge-instance"},"Getting a TeleportBridge instance"),(0,i.kt)("p",null,"The TeleportBridge requires some arguments in its ",(0,i.kt)("a",{parentName:"p",href:"/teleport-sdk-docs/docs/sdk/teleport-sdk.teleportbridge._constructor_"},"constructor"),", namely a ",(0,i.kt)("em",{parentName:"p"},"Source Domain")," and a ",(0,i.kt)("em",{parentName:"p"},"Source Domain Provider"),". Supported source domains are"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"* optimism\n* arbitrum\n* optimism-goerli-testnet\n* arbitrum-goerli-testnet\n")),(0,i.kt)("p",null,"Wherever providers are omitted from the ",(0,i.kt)("inlineCode",{parentName:"p"},"TeleportBridge")," constructor, a default provider will be used.  "),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"Source Domain Provider")," should be an ",(0,i.kt)("inlineCode",{parentName:"p"},"ethers.js")," ",(0,i.kt)("inlineCode",{parentName:"p"},"SignerOrProvider"),". To enable teleportation, you should connect to the user's wallet and pass ",(0,i.kt)("inlineCode",{parentName:"p"},"TeleportBridge")," the signer returned by Ethers. The SDK will take care of proposing transactions to the user."),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"Destination Domain Provider")," is required in case relayers can't be used to relay the transaction on the destination domain. See ",(0,i.kt)("a",{parentName:"p",href:"/teleport-sdk-docs/docs/receiving"},"Receiving Teleported Funds"),"."),(0,i.kt)("p",null,"You can omit the ",(0,i.kt)("em",{parentName:"p"},"Destination Domain")," when using these as your source domain and the SDK will select the parent network as the destination domain. For example, if you select ",(0,i.kt)("inlineCode",{parentName:"p"},"arbitrum")," as your source domain, the SDK will select Mainnet as the destination."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Create a TeleportBridge object that handles Fast Withdrawals from Arbitrum to Mainnet.\nimport { TeleportBridge } from 'teleport-sdk'\n\nconst bridge = new TeleportBridge({\n    srcDomain: 'abritrum',\n    srcDomainProvider: <network provider from ethers.js>\n})\n")))}d.isMDXComponent=!0}}]);